{"version":3,"sources":["components/message/MessageCreateInput.js","components/message/Message.js","components/message/MessageList.js","services/MessageServices.js","App.js","index.js"],"names":["MessageCreateInput","props","react_default","a","createElement","className","rows","placeholder","value","onChange","e","updateInput","target","preventDefault","disabled","length","onClick","addMessage","Message","_this$props","this","groupId","concat","React","PureComponent","MessageList","messages","map","message","index","message_Message","key","isValidMessage","msg","maxLength","trim","includes","splitMessageWithIndicator","indicator","lastWhiteSpcae","slice","lastIndexOf","splitMessageWithParts","parts","msgs","chunk","remaining","arr","push","MessageServices","splitMessage","l","i","Math","ceil","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","messageInput","messageError","bind","assertThisInitialized","newMessage","chunks","newMessages","c","setState","objectSpread","toConsumableArray","_this$state","id","message_MessageCreateInput","message_MessageList","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.4b666391.chunk.js","sourcesContent":["// @flow\n\nimport React from 'react';\nimport './message.scss'\n\ntype Props = {\n  value: string,\n  updateInput: (value: string) => void,\n  addMessage: (newMessage: string) => void,\n}\n\nconst MessageCreateInput = (props: Props) =>(\n  <div className=\"message-create\">\n    <form className=\"message-input-container\">\n      <textarea className=\"message-input\"\n        rows=\"5\"\n        placeholder=\"Input your messge here...\"\n        value={props.value}\n        onChange={(e)=> {\n          props.updateInput(e.target.value)\n          e.preventDefault()\n        }}\n      />\n      <button className=\"message-submit\"\n        disabled={props.value.length === 0}\n        onClick={(e)=> {\n          props.addMessage(props.value)\n          e.preventDefault()\n        }}\n      >\n        Submit\n      </button>\n      </form>\n    </div>\n);\n\nexport default MessageCreateInput\n","// @flow\nimport React from 'react'\n\ntype Props = {\n  value: string,\n  groupId: number,\n}\n\nclass Message extends React.PureComponent<Props>{\n\n  render(){\n    const {value, groupId} = this.props\n\n    return (\n      <div className={`tweeter-message ${groupId % 2 === 0? 'even': 'odd'}`}>\n        {value}\n      </div>\n    )\n  }\n}\n\nexport default Message\n","// @flow\n\nimport React from 'react';\nimport Message from './Message.js'\nimport type {MessageType} from './../../domains/Message'\n\ntype Props = {\n  messages: Array<MessageType>\n}\n\nconst MessageList = (props: Props) =>(\n  <div className=\"messages-list\">\n    {\n      props.messages.map( (message, index)=> (\n          <Message key={index}\n            value={message.value}\n            groupId={message.groupId}\n          />\n      ))\n    }\n  </div>\n);\n\nexport default MessageList\n","// @flow\n\nexport const isValidMessage = (msg: string, maxLength: number): boolean => {\n  if(msg.length > maxLength && !msg.trim().includes(' ')){\n    return false\n  }\n  return true\n}\n\nexport const splitMessageWithIndicator = (msg: string, indicator: string, maxLength: number) =>{\n\n  if((indicator+msg).length <= maxLength){\n    //indicator + msg is not greater than maxLength\n    return [indicator+msg, '']\n  }else{\n    //try to get first string by find last space inside a msg50 string\n    let msg50 = msg.slice(0, maxLength-indicator.length)\n    let lastWhiteSpcae = msg50.lastIndexOf(' ')\n    if(lastWhiteSpcae > 0){\n      let chunk = indicator + msg.slice(0, lastWhiteSpcae)\n      return [chunk, msg.slice(lastWhiteSpcae + 1)]\n    }\n  }\n  //if can not find lastWhiteSpace so return\n  return [msg, msg]\n}\n\nexport const splitMessageWithParts = (msg: string, parts: number, maxLength: number) => {\n  let message = msg,  msgs = []\n  let index =0 ,indicator = `${index}/${parts} `\n  let chunk='',  remaining = message\n\n  while(remaining.length > 0){\n    index = index + 1\n    indicator = `${index}/${parts} `;\n    let arr = splitMessageWithIndicator(remaining, indicator, maxLength)\n    chunk = arr[0]\n    remaining =arr[1]\n    if(isValidMessage(chunk, maxLength)){\n      msgs.push(chunk)\n    }else{\n      return false\n    }\n  }\n  //split ok\n  if(index === parts){\n    return msgs\n  }\n  //can not slipt into  parts\n  return []\n}\n\nexport const splitMessage = (msg: string, maxLength: number) => {\n  let msgs = []\n  let l = msg.length\n  if(l <= maxLength){\n    msgs.push(msg)\n  }else{\n    for(let i=Math.ceil(l/maxLength); i < l; i++){\n      //try to splip into i parts\n      msgs = splitMessageWithParts(msg, i, maxLength)\n      //check chunks is valid, chunk is no-space and have more than maxLength\n      if(msgs === false){\n        return false\n      }\n      if(msgs.length > 0){\n        return msgs\n      }\n    }\n  }\n  //return empty array\n  return msgs\n}\n\nconst MessageServices = {\n  isValidMessage,\n  splitMessage\n}\n\nexport default MessageServices\n","// @flow\nimport React, { Component } from 'react'\nimport './App.scss'\nimport MessageCreateInput from './components/message/MessageCreateInput'\nimport MessageList from './components/message/MessageList'\nimport MessageServices from './services/MessageServices'\nimport type {MessageType} from './domains/Message'\n\ntype State = {\n  messages: Array<MessageType>,\n  messageInput: string,\n  messageError: string,\n}\n\ntype Props = {}\n\nclass App extends Component<Props, State> {\n\n  constructor(props: Props){\n    super(props);\n    this.state = {\n      messages: [],\n      messageInput: '',\n      messageError: '',\n    };\n\n    this.addMessage = this.addMessage.bind(this)\n    this.updateInput = this.updateInput.bind(this)\n  }\n\n  addMessage: () => void\n\n  addMessage(newMessage: string){\n    const {messages} = this.state\n    let groupId = 1\n    if(messages.length > 0){\n      groupId = messages[0].groupId + 1\n    }\n\n    let chunks = MessageServices.splitMessage(newMessage, 50)\n\n    if(chunks && chunks.length > 0){\n      let newMessages = chunks.map(c=>({groupId, value: c}))\n      this.setState( state=>({\n        ...state,\n        messages: [...newMessages, ...state.messages],\n        messageInput: '',\n        messageError: '',\n      }))\n    }else{\n      this.setState ( state=> ({\n        ...state,\n        messageError: \"Your message is invalid\"\n      }))\n    }\n  }\n\n  updateInput: () => void\n  updateInput(value: string){\n    this.setState( state=>({\n      ...state,\n      messageInput: value\n    }))\n  }\n\n  render() {\n    const {messageInput, messages, messageError} = this.state\n    return (\n      <div id=\"app\" className=\"App\">\n        <section id=\"app-header\"> </section>\n        <section id=\"app-profile\"> </section>\n        <section id=\"app-message-center\">\n          <div className=\"err-input-message\">{messageError} </div>\n          <MessageCreateInput\n            addMessage={this.addMessage}\n            updateInput={this.updateInput}\n            value={messageInput}\n          />\n          <MessageList\n            messages={messages}\n          />\n        </section>\n        <section id=\"app-news\"> </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}